Git == Version Control System

Version Control == Code Change Tracker

Directory == folder

Repository == Project == Main Directory

CLI == Command Line Interface

cd == Change Directory

Git == Code Change Tracker Tool

GitHub == Website that hosts our Git Repositories


Git Commands:
    - Clone     == Bring a repository that is hosted somwhere like GitHub into a folder on our local machine
    - Status    == Shows the status of every tracked file
    - Add       == Adds files to be tracked by Git
    - Commit    == Saves the changes that have been made
    - Push      == Uploades the Git Commits that have been made into the repo stored on GitHub


Rule:
    Add a file -> Commit the changes -> Push the commits
    Add -> Commit -> Push



Clone:
    git clone SSH_Key

    The SSH_Key can be found on the Green Code Button on the GitHub Repository
    The SSH_Key is a link/key that is unique to our repository

    After cloning, we will have a hidden .git directory(folder), which contains info about
    our repository

    We can see all the hidden files by using the command: ls -la

GIT COMMANDS CAN WORK ONLY WHEN WE ARE INSIDE OF THE MAIN DIRECTORY(folder)


Status:
    git status

    Prints info about every tracked file:
        if it has unsaved(uncommited) changes
        if it has commited changes but has yet to be pushed on the GitHub Repo



Add:
    git add file

    it makes Git track the changes that will be made on the file
    if we want Git to track all the files in our current working directory, we simply use:
        git add .



Commit:
    git commit -m "Commit Title" [-m "Commit Description"]

    The first -m is COMPULSORY, because it indicates the title of the commit.
    The second -m is optional, because it indicates the Commit Description


Push:
    git push

    it pushes the code live onto the GitHub Repo

    In order for git push to work we have to prove GitHub that we are the owner of the GitHub Account

    We have to connect our local machine(laptop/PC) to GitHub.

    The way that this is done is by using SSH Keys.

    We have to generate an SSH Key locally using the following command:
        ssh-keygen -t rsa -b 4096 -C "email@example.com"

    Instead of email@example.com we use the same email address that we used to login into GitHub
    (the same email with the one used for our GitHub Account)

    The above command will generate both a private and a public key.
    The private key MUST be accesible only by the owner of the account and MUST NOT be shared with anyone else.
    The public key is for sharing permissions to edit the repository by other members of GitHub.
    (this one must be shared only to trusted people, or if the repo shall become open source it can be shared with anyone)

    The default file for the generated SSH Key is inside our user directory/.ssh.
    The default name for our key is id_rsa but we can choose to rename it.

    We can also add a passphrase for our key, in order to restrict access to the key.
    If we don't want to add a passphrase we simply press enter to finish the generation process.

    After we have generated the key we must search for it on our local machine on the 
    above mentioned location, we will have two type of keys, a private one which
    contains no extension and a public one that has a .pub extension.

    We will only upload the .pub generated key onto the GitHub interface.
    It is okay for other people to see the .pub key, but it is NOT okay for people to see the private key.

    How the process works is that:
        We share the .pub key with GitHub
        Everytime we want to connect to GitHub from a new machine we simply use our private key as an authenticator


    The private key shows GitHub that we are the ones who generated the public key.
    There is a mathematical proof that states that only the private key could've generated the public key.

    We have to copy the contents of the .pub file and go to 
        GitHub > Settings > SSH and GPG Keys > New SSH Key
    We then can give any name we want to that key(it's not important, it's only for reference)
    and then paste in the contents of the .pub file into the "Key" textbox and press "Add SSH Key"

    We will have to type in our GitHub Password in order to confirm the addition of the key.











Markdown styling(for README.md):
    # Header
    ## Subheader
    normal text




