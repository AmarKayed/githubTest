Git == Version Control System

Version Control == Code Change Tracker

Directory == folder

Repository == Project == Main Directory

CLI == Command Line Interface

cd == Change Directory

Git == Code Change Tracker Tool

GitHub == Website that hosts our Git Repositories


Git Commands:
    - Clone     == Bring a repository that is hosted somwhere like GitHub into a folder on our local machine
    - Status    == Shows the status of every tracked file
    - Add       == Adds files to be tracked by Git
    - Commit    == Saves the changes that have been made
    - Push      == Uploades the Git Commits that have been made into the repo stored on GitHub


Rule:
    Add a file -> Commit the changes -> Push the commits
    Add -> Commit -> Push



Clone:
    git clone SSH_Key

    The SSH_Key can be found on the Green Code Button on the GitHub Repository
    The SSH_Key is a link/key that is unique to our repository

    After cloning, we will have a hidden .git directory(folder), which contains info about
    our repository

    We can see all the hidden files by using the command: ls -la

GIT COMMANDS CAN WORK ONLY WHEN WE ARE INSIDE OF THE MAIN DIRECTORY(folder)


Status:
    git status

    Prints info about every tracked file:
        if it has unsaved(uncommited) changes
        if it has commited changes but has yet to be pushed on the GitHub Repo



Add:
    git add file

    it makes Git track the changes that will be made on the file
    if we want Git to track all the files in our current working directory, we simply use:
        git add .

    Adding everything except .gitignore and .gitkeep:
        git add *

Commit:
    git commit -m "Commit Title" [-m "Commit Description"]

    The first -m is COMPULSORY, because it indicates the title of the commit.
    The second -m is optional, because it indicates the Commit Description

    We can also commit directly without using git add .
        git commit -am "Title" -m "Description"

Push:
    Initially we have to use:
        git push origin master
    
    But we can setup an "Upstream". 
    An Upstream basically tells Git where exactly we want to push our changes.
    
    We can setup an Upstream by using the following command:
        git push -u origin master
    
    And thus we can from now on just use:
        git push


    it pushes the code live onto the GitHub Repo

    In order for git push to work we have to prove GitHub that we are the owner of the GitHub Account

    We have to connect our local machine(laptop/PC) to GitHub.

    The way that this is done is by using SSH Keys.

    We have to generate an SSH Key locally using the following command:
        ssh-keygen -t rsa -b 4096 -C "email@example.com"

    Instead of email@example.com we use the same email address that we used to login into GitHub
    (the same email with the one used for our GitHub Account)

    The above command will generate both a private and a public key.
    The private key MUST be accesible only by the owner of the account and MUST NOT be shared with anyone else.
    The public key is for sharing permissions to edit the repository by other members of GitHub.
    (this one must be shared only to trusted people, or if the repo shall become open source it can be shared with anyone)

    The default file for the generated SSH Key is inside our user directory/.ssh.
    The default name for our key is id_rsa but we can choose to rename it.

    We can also add a passphrase for our key, in order to restrict access to the key.
    If we don't want to add a passphrase we simply press enter to finish the generation process.

    After we have generated the key we must search for it on our local machine on the 
    above mentioned location, we will have two type of keys, a private one which
    contains no extension and a public one that has a .pub extension.

    We will only upload the .pub generated key onto the GitHub interface.
    It is okay for other people to see the .pub key, but it is NOT okay for people to see the private key.

    How the process works is that:
        We share the .pub key with GitHub
        Everytime we want to connect to GitHub from a new machine we simply use our private key as an authenticator


    The private key shows GitHub that we are the ones who generated the public key.
    There is a mathematical proof that states that only the private key could've generated the public key.

    We have to copy the contents of the .pub file and go to 
        GitHub > Settings > SSH and GPG Keys > New SSH Key
    We then can give any name we want to that key(it's not important, it's only for reference)
    and then paste in the contents of the .pub file into the "Key" textbox and press "Add SSH Key"

    We will have to type in our GitHub Password in order to confirm the addition of the key.

    The only thing left to do is to make sure that our local Git CLI knows about our
    generated keys, more about that on:
        https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent


Pull:
    git pull

    This command updates our local repository to be up to date with the latest version of our GitHub repository

    The difference between pull and clone is that clone downloads the whole repository on our local machine
    whilst pull simply just adds all the things that are missing from our remote/local repository(the one stored on our laptop).


Reset/Unadd/Unstage:
    git reset

    It removes all the added files from staging.

    Remove a single file from staging area:
        git reset fileName



    Link: https://stackoverflow.com/questions/6919121/why-are-there-two-ways-to-unstage-a-file-in-git
    git reset is preffered over git rm --cached
    "git rm --cached fileName" is equivalent to deleting a file in terms of the git status message, 
    the file will still remain in our local repository(our file system), but it will be treated as 
    if it got deleted and thus in the next commit it will be removed from the GitHub repository
    (it is literally considered a deleted file which cannot be tracked). Furthermore, if we try git add . 
    then the file will be added to the stage area as if it just got created, thus we shouldn't use it 
    unless we want to get rid of the file on GitHub.

    Observation:
        git reset is used both to unstage files that have been staged for tracking via the git add command, as well
        as to revert back to previous commits(turn the local repository to a previous version).


Undoing a commit:
    git reset HEAD~1
    
    It removes the last commit that was made.
    Instead of ~1 we can put any number to indicate how many commits back we want to go to.

    undoing multiple commits:
        git log
        git reset commitID

    We go to git log and find the commit ID of the commit we want to reset back to
    and use git reset to go back to that commit.

    The reset will only say that the changes we've made that since the commit we've reset
    back to are new changes and are uncommited, it will not remove the changes.
    
    If we want to also remove the changes made after the commit reset we use:
        git reset --hard commitID

    We can also try to clone the repository once again since the latest version
    of the repository is the one with the commit reset.



    Stack Overflow: https://stackoverflow.com/questions/1616957/how-do-you-roll-back-reset-a-git-repository-to-a-particular-commit

	git reset without the --hard option resets the commit history, but not the files. 
	With the --hard option the files in working tree are also reset.

	If you wish to commit that state so that the remote repository also points to the rolled back commit do: 
	git push <reponame> -f



History:
    git log
    
    This gives us a cronological history of every commit we have made.
    We can scroll by using the SPACEBAR key.
    
    git diff

    This prints all the changes we have made so far since the last commit.



Remove:
    git rm fileName

    It deletes the file both in our repository and on our local machine.

    We have to commit these changes and then push them.







Creating Git Repository locally:
    We can simply create a folder/directory anywhere we want and then navigate
    to the location of the folder in our CLI and use the command:
        git init

    This initializes the current directory to be the main folder in our newly created repository.

    Now in order to push our changes onto a GitHub Repository we first have to 
    create an empty repository on the GitHub website and then we have to copy 
    the SSH Link(under the Green Code Button) and then use the following command:
        git remote add origin git@github.com:user/repositoryName.git
    
    Instead of the last argument we simply use the SSH Link we have copied.

    In order to view if the git remote command worked we use:
        git remote -v




Vscode:

    If we want to run Vscode and have Git enabled we can use:
        cd your-folder-location
        code . -n



Markdown styling(for README.md):
    # Header
    ## Subheader
    normal text



Shorten path in command prompt:
    prompt $g

Shorten path in Linux Terminal:
    PROMPT_DIRTRIM=1
    
    * we can use =n where n represents how many folders 
      we would like to see at a time(Example: PROMPT_DIRTRIM=2)
      




Git Branch:
    Visualizing Git Branches
    git log --graph --decorate --oneline

    Creating New Branches:
        git branch branchName
    Switching Branches:
        git checkout branchName
    Create + Switch New Branch:
        git checkout -b branchName

    View Existing Branches:
        git branch
    Rename Branch:
        git branch -M newBranchName
    Delete Branch:
        git branch -D branchName

    After creating a new branch, we will have to setup a new
    upstream for the git push command:
        git push -u origin branchName

Git Merge:
    We use git merge to merge a branch into the current branch:
        git merge branchName

    If we want to merge branches to the master branch, 
    we have to first be in the master branch:
        git checkout master
        git merge branchName
    
    Merge conflicts occur when we have two different branches
    with different contents on the same line of a file.

    If we have a merge conflict, the merging command will modify
    the conflicting files such that it shows us what lines of the
    file are causing the conflict. After we modify the contents
    such that we have a final version, we simply perform a commit
    in which we specify that the merge has been succesful.
